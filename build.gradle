buildscript {
    ext.isCiBuild = System.getenv("CI") == "true"

    ext.kotlinVersion = '1.3.50'
    ext.detektVersion = '1.0.1'
    ext.mavenPublishPluginVersion = '0.8.0'
    ext.androidGradlePluginVersion = '3.6.0-alpha10'
    ext.coroutinesVersion = '1.3.0'
    ext.junitVersion = '4.13-beta-3'
    ext.truthVersion = '1.0'
}

plugins {
    id 'java-gradle-plugin'
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'io.gitlab.arturbosch.detekt' version "$detektVersion"
    id 'com.vanniktech.maven.publish' version "$mavenPublishPluginVersion"
}

repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
}

gradlePlugin {
    plugins {
        firestorm {
            id = 'io.github.reactivecircus.firestorm'
            displayName = 'Firestorm Gradle Plugin'
            description = 'Gradle plugin for running modularized Android instrumented tests on Firebase Test Lab'
            implementationClass = 'reactivecircus.firestorm.FirestormPlugin'
        }
    }
}

configurations {
    fixtureClasspath
}

tasks.getByName('pluginUnderTestMetadata')
        .getPluginClasspath()
        .from(configurations.fixtureClasspath)

sourceSets {
    functionalTest {}
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

dependencies {
    implementation platform("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion")
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    compileOnly "com.android.tools.build:gradle:$androidGradlePluginVersion"

    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.google.truth:truth:$truthVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    testImplementation "com.android.tools.build:gradle:$androidGradlePluginVersion"
    
    fixtureClasspath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    fixtureClasspath "com.android.tools.build:gradle:$androidGradlePluginVersion"
}

task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}


check {
    dependsOn(tasks.functionalTest)
}

tasks.withType(Test).configureEach {
    maxParallelForks Runtime.runtime.availableProcessors() * 2
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

if (!isCiBuild) {
    dependencies {
        detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion"
    }
}

detekt {
    toolVersion = detektVersion
    input = files("src/")
    failFast = true
    parallel = true
    config = files("${rootDir}/detekt.yml")
    reports {
        html.destination = file("${project.buildDir}/reports/detekt/${project.name}.html")
    }
}
